"use strict";(self.webpackChunkmobit_docs=self.webpackChunkmobit_docs||[]).push([[4918],{24780:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"spore-types","title":"Spore","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/spore-types.mdx","sourceDirName":".","slug":"/spore-types","permalink":"/mobit-docs/en/spore-types","draft":false,"unlisted":false,"editUrl":"https://github.com/sociallayer-im/mobit-doc/tree/main/docs/spore-types.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Core Types","permalink":"/mobit-docs/en/core-types"},"next":{"title":"Token Types","permalink":"/mobit-docs/en/token-types"}}');var s=r(74848),i=r(28453),o=r(40964),a=r(87210);const l={sidebar_position:3},d="Spore",c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Core Types",id:"core-types",level:2},{value:"Spore (NFT)",id:"spore-nft",level:3},{value:"Query Examples",id:"query-examples",level:4},{value:"Cluster (NFT Collection)",id:"cluster-nft-collection",level:3},{value:"Query Examples",id:"query-examples-1",level:4},{value:"Spore Action (NFT Operation Records)",id:"spore-action-nft-operation-records",level:3},{value:"Query Examples",id:"query-examples-2",level:4},{value:"Advanced Query Examples",id:"advanced-query-examples",level:2},{value:"1. Query the most recently minted NFTs",id:"1-query-the-most-recently-minted-nfts",level:3},{value:"2. Query collection statistics",id:"2-query-collection-statistics",level:3},{value:"Special Query Techniques",id:"special-query-techniques",level:2},{value:"1. Content Type Filtering",id:"1-content-type-filtering",level:3},{value:"2. Time Range Query",id:"2-time-range-query",level:3},{value:"Notes",id:"notes",level:2},{value:"Best Practices",id:"best-practices",level:2}];function u(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"spore",children:"Spore"})}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"Spore is the NFT (Non-Fungible Token) system of CKB, consisting of two main components: Spores (individual NFTs) and Clusters (NFT collections). This document provides a detailed description of the data structures and query methods for these two components."}),"\n",(0,s.jsx)(t.h2,{id:"core-types",children:"Core Types"}),"\n",(0,s.jsx)(t.h3,{id:"spore-nft",children:"Spore (NFT)"}),"\n",(0,s.jsx)(a.A,{typeName:"spores",typeDescription:"The Spore type represents an individual non-fungible token (NFT) in the RGBPP system.",fields:[{name:"id",type:"bytea!",description:"The unique identifier for the Spore. Format: hex byte array prefixed with \\x. Purpose: uniquely identifies each Spore."},{name:"type_id",type:"String!",description:"The type identifier for the Spore. Purpose: identifies the type of Spore."},{name:"content",type:"bytea!",description:"The content data of the Spore. Format: hex byte array prefixed with \\x. Purpose: stores the actual content of the Spore."},{name:"content_type",type:"String",description:"The content type of the Spore (e.g., image/png). Purpose: describes the data type of the Spore's content."},{name:"owner_address",type:"String",description:"The owner address of the Spore. Purpose: identifies the address that owns the Spore."},{name:"is_burned",type:"Boolean!",description:"Indicates whether the Spore has been burned. Purpose: determines the state of the Spore."},{name:"cluster_id",type:"bytea",description:"The ID of the cluster to which the Spore belongs. Format: hex byte array prefixed with \\x. Nullable: if the Spore does not belong to any cluster, it can be null. Purpose: associates the Spore with its cluster."},{name:"created_at",type:"timestamp!",description:"The creation time of the Spore. Purpose: records the timestamp when the Spore was created."},{name:"updated_at",type:"timestamp!",description:"The last update time of the Spore. Purpose: records the timestamp of the last update to the Spore."},{name:"cluster",type:"clusters",description:"Associated cluster information. Purpose: retrieves detailed information about the cluster to which the Spore belongs."},{name:"addressByTypeId",type:"addresses!",description:"Type address information. Purpose: retrieves address information corresponding to the Spore's type."}]}),"\n",(0,s.jsx)(t.h4,{id:"query-examples",children:"Query Examples"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"1. Query a single Spore"})}),"\n",(0,s.jsx)(t.p,{children:"Attempt to query a specific Spore by ID:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetSpore($sporeId: bytea!) {\nspores(where: { id: { _eq: $sporeId } }) {\n  id\n  content_type\n  content\n  owner_address\n  created_at\n  cluster {\n    cluster_name\n  }\n}\n}",defaultVariables:{test:'{\n    "sporeId": "\\xe1a8d4da08528c9189e150c8823155d6451ef61866ccb228dd787be7506dadb4"\n  }',main:'{\n    "sporeId": "\\xd9bf448691901ab9b67fb3291c45403b34ae0a6cf5bb0ea7e527e5cc978c9152"\n  }'}}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"2. Query unburned Spores"})}),"\n",(0,s.jsx)(t.p,{children:"Query all unburned Spores:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetUnburnedSpores {\nspores(limit: 5, where: { is_burned: { _eq: false } }) {\n  id\n  content_type\n  owner_address\n  created_at\n}\n}"}),"\n",(0,s.jsx)(t.h3,{id:"cluster-nft-collection",children:"Cluster (NFT Collection)"}),"\n",(0,s.jsx)(a.A,{typeName:"clusters",typeDescription:"The Clusters type represents NFT collections in the RGBPP system.",fields:[{name:"id",type:"bytea!",description:"The unique identifier for the cluster. Format: hex byte array prefixed with \\x. Purpose: uniquely identifies each cluster."},{name:"type_id",type:"String!",description:"The type identifier for the cluster. Purpose: identifies the type of the cluster."},{name:"cluster_name",type:"String",description:"The name of the cluster. Purpose: describes the name of the cluster."},{name:"cluster_description",type:"String",description:"The description of the cluster. Purpose: describes the content and purpose of the cluster."},{name:"owner_address",type:"String",description:"The owner address of the cluster. Purpose: identifies the address that owns the cluster."},{name:"is_burned",type:"Boolean!",description:"Indicates whether the cluster has been burned. Purpose: determines the state of the cluster."},{name:"mutant_id",type:"bytea",description:"The mutant ID of the cluster. Format: hex byte array prefixed with \\x. Nullable: if the cluster has no mutant, it can be null. Purpose: records the mutation information of the cluster."},{name:"created_at",type:"timestamp!",description:"The creation time of the cluster. Purpose: records the timestamp when the cluster was created."},{name:"updated_at",type:"timestamp!",description:"The last update time of the cluster. Purpose: records the timestamp of the last update to the cluster."},{name:"spores",type:"[spores!]!",description:"All Spores in the cluster. Purpose: lists all NFTs contained in the cluster."},{name:"addressByTypeId",type:"addresses!",description:"Type address information. Purpose: retrieves address information corresponding to the cluster's type."}]}),"\n",(0,s.jsx)(t.h4,{id:"query-examples-1",children:"Query Examples"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"1. Query a single cluster"})}),"\n",(0,s.jsx)(t.p,{children:"Attempt to query a specific cluster by ID:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetCluster($clusterId: bytea!) {\nclusters(where: { id: { _eq: $clusterId } }) {\n  id\n  cluster_name\n  cluster_description\n  owner_address\n  created_at\n  spores {\n    id\n    content_type\n    owner_address\n  }\n}\n}",defaultVariables:'{\n"clusterId": "\\x55c798f36657403d961455bd440c368bc7f40ab082e2736e39b6ff12ecbf9e98"\n}'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"2. Query unburned clusters"})}),"\n",(0,s.jsx)(t.p,{children:"Query all unburned clusters:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetUnburnedClusters {\nclusters(limit: 5, where: { is_burned: { _eq: false } }) {\n  id\n  cluster_name\n  cluster_description\n  owner_address\n  created_at\n}\n}"}),"\n",(0,s.jsx)(t.h3,{id:"spore-action-nft-operation-records",children:"Spore Action (NFT Operation Records)"}),"\n",(0,s.jsx)(a.A,{typeName:"spore_actions",typeDescription:"The SporeActions type represents NFT operation records in the RGBPP system.",fields:[{name:"action_type",type:"spore_action_type!",description:"The type of action performed on the Spore. Purpose: describes the kind of operation."},{name:"tx",type:"bytea!",description:"The transaction hash associated with the action. Format: hex byte array prefixed with \\x. Purpose: identifies the transaction executing the action."},{name:"from_address_id",type:"String",description:"The source address of the action. Purpose: identifies the originating address of the operation."},{name:"to_address_id",type:"String",description:"The target address of the action. Purpose: identifies the destination address of the operation."},{name:"spore_id",type:"bytea",description:"The ID of the Spore involved in the action. Format: hex byte array prefixed with \\x. Nullable: if the action does not involve a specific Spore, it can be null. Purpose: identifies the Spore related to the action."},{name:"cluster_id",type:"bytea",description:"The ID of the cluster involved in the action. Format: hex byte array prefixed with \\x. Nullable: if the action does not involve a specific cluster, it can be null. Purpose: identifies the cluster related to the action."},{name:"data_hash",type:"bytea",description:"The data hash associated with the action. Format: hex byte array prefixed with \\x. Nullable: if the action does not involve specific data, it can be null. Purpose: identifies data related to the action."},{name:"created_at",type:"timestamp!",description:"The time the action was executed. Purpose: records the timestamp of the action."}]}),"\n",(0,s.jsx)(t.h4,{id:"query-examples-2",children:"Query Examples"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"1. Query all operation records for a specific Spore"})}),"\n",(0,s.jsx)(t.p,{children:"Query all operation records for a specific Spore:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetSporeActions($sporeId: bytea!) {\nspore_actions(\n  where: { spore_id: { _eq: $sporeId } }\n  order_by: { created_at: desc }\n) {\n  action_type\n  from_address_id\n  to_address_id\n  created_at\n  tx\n}\n}",defaultVariables:'{\n"sporeId": "\\xe1a8d4da08528c9189e150c8823155d6451ef61866ccb228dd787be7506dadb4"\n}'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"2. Query all operation records for a specific cluster"})}),"\n",(0,s.jsx)(t.p,{children:"Query all operation records for a specific cluster:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetClusterActions($clusterId: bytea!) {\nspore_actions(\n  where: { cluster_id: { _eq: $clusterId } }\n  order_by: { created_at: desc }\n) {\n  action_type\n  from_address_id\n  to_address_id\n  created_at\n  tx\n}\n}",defaultVariables:'{\n"clusterId": "\\x55c798f36657403d961455bd440c368bc7f40ab082e2736e39b6ff12ecbf9e98"\n}'}),"\n",(0,s.jsx)(t.h2,{id:"advanced-query-examples",children:"Advanced Query Examples"}),"\n",(0,s.jsx)(t.h3,{id:"1-query-the-most-recently-minted-nfts",children:"1. Query the most recently minted NFTs"}),"\n",(0,s.jsx)(t.p,{children:"Retrieve a list of the most recently minted NFTs:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetRecentMints($limit: Int = 10) {\nspores(\n  order_by: { created_at: desc }\n  limit: $limit\n  where: { is_burned: { _eq: false } }\n) {\n  id\n  content_type\n  owner_address\n  created_at\n  cluster {\n    cluster_name\n  }\n}\n}",defaultVariables:'{\n"limit": 5\n}'}),"\n",(0,s.jsx)(t.h3,{id:"2-query-collection-statistics",children:"2. Query collection statistics"}),"\n",(0,s.jsx)(t.p,{children:"Retrieve statistical data for a collection:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetClusterStats($clusterId: bytea!) {\nclusters(where: { id: { _eq: $clusterId } }) {\n  cluster_name\n  cluster_description\n  created_at\n  id\n}\n}",defaultVariables:'{\n"clusterId": "\\x55c798f36657403d961455bd440c368bc7f40ab082e2736e39b6ff12ecbf9e98"\n}'}),"\n",(0,s.jsx)(t.h2,{id:"special-query-techniques",children:"Special Query Techniques"}),"\n",(0,s.jsx)(t.h3,{id:"1-content-type-filtering",children:"1. Content Type Filtering"}),"\n",(0,s.jsx)(t.p,{children:"Filter for specific types of NFTs:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:'query GetImageNFTs {\nspores(\n  limit:10,\n  where: {\n    content_type: { _ilike: "image/%" }\n  }\n) {\n  id\n  content_type\n  content\n}\n}'}),"\n",(0,s.jsx)(t.h3,{id:"2-time-range-query",children:"2. Time Range Query"}),"\n",(0,s.jsx)(t.p,{children:"Query NFTs within a specific time range:"}),"\n",(0,s.jsx)(o.A,{defaultQuery:"query GetNFTsInTimeRange($startTime: timestamp!, $endTime: timestamp!) {\nspores(\n  limit:10,\n  where: {\n    created_at: {\n      _gte: $startTime,\n      _lte: $endTime\n    }\n  }\n) {\n  id\n  created_at\n}\n}",defaultVariables:'{\n"startTime": "2024-01-01T00:00:00Z",\n"endTime": "2024-12-31T23:59:59Z"\n}'}),"\n",(0,s.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsx)(t.admonition,{title:"Content Handling",type:"caution",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"content"})," field stores binary data, which needs to be parsed and displayed based on ",(0,s.jsx)(t.code,{children:"content_type"}),"."]}),"\n"]})}),"\n",(0,s.jsx)(t.admonition,{title:"Ownership Verification",type:"warning",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["When querying, be sure to check the ",(0,s.jsx)(t.code,{children:"is_burned"})," status."]}),"\n",(0,s.jsxs)(t.li,{children:["Verify the ",(0,s.jsx)(t.code,{children:"owner_address"})," to confirm current ownership."]}),"\n"]})}),"\n",(0,s.jsx)(t.admonition,{title:"Cluster Association",type:"info",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Spores can exist independently and may not belong to any cluster, hence ",(0,s.jsx)(t.code,{children:"cluster_id"})," may be null."]}),"\n"]})}),"\n",(0,s.jsx)(t.admonition,{title:"Operation Records",type:"tip",children:(0,s.jsxs)(t.p,{children:["Query the ",(0,s.jsx)(t.code,{children:"spore_actions"})," for a complete operation history, including minting, transferring, and burning records."]})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Data Validation"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Always validate the ",(0,s.jsx)(t.code,{children:"is_burned"})," status during queries."]}),"\n",(0,s.jsxs)(t.li,{children:["Check ",(0,s.jsx)(t.code,{children:"owner_address"})," to confirm ownership."]}),"\n",(0,s.jsxs)(t.li,{children:["Validate ",(0,s.jsx)(t.code,{children:"content_type"})," to ensure the content type is supported."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Performance Optimization"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Use appropriate indexed fields."}),"\n",(0,s.jsx)(t.li,{children:"Limit the fields returned in queries."}),"\n",(0,s.jsx)(t.li,{children:"Implement pagination for large datasets."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Error Handling"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Handle null value cases."}),"\n",(0,s.jsx)(t.li,{children:"Validate the integrity of binary data."}),"\n",(0,s.jsx)(t.li,{children:"Check the validity of timestamps."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"By correctly utilizing these query interfaces within the Spore system, you can implement functions for minting, transferring, querying, and displaying NFTs, creating a comprehensive NFT management and display system."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},87210:(e,t,r)=>{r.d(t,{A:()=>l});r(96540);var n=r(34164),s=r(92303),i=r(95293);const o={graphqlContainer:"graphqlContainer_txj9",light:"light_tjNd",dark:"dark_xDko",typeDescription:"typeDescription_l4MU",keyword:"keyword_CRfX",typeName:"typeName_VxqW",fields:"fields_Dmof",field:"field_mRXJ",fieldName:"fieldName_fK8b",colon:"colon_zlWV",fieldType:"fieldType_bW41",braces:"braces_l5fT"};var a=r(74848);function l(e){let{typeName:t,typeDescription:r,fields:l}=e;const{colorMode:d}=(0,i.G)();(0,s.A)();return(0,a.jsx)("div",{className:(0,n.A)(o.graphqlContainer,o[d],"theme-code-block"),children:(0,a.jsxs)("div",{className:o.typeHeader,children:[r&&(0,a.jsx)("div",{className:o.typeDescription,children:(0,a.jsxs)("span",{children:["# ",r]})}),(0,a.jsxs)("div",{className:o.codeBlock,children:[(0,a.jsx)("span",{className:o.keyword,children:"type"})," ",(0,a.jsx)("span",{className:o.typeName,children:t})," ",(0,a.jsx)("span",{className:o.braces,children:"{"}),(0,a.jsx)("div",{className:o.fields,children:l.map((e=>{let{name:t,type:r,description:n}=e;return(0,a.jsxs)("div",{className:o.field,"data-tooltip":n,children:[(0,a.jsx)("span",{className:o.fieldName,children:t}),(0,a.jsx)("span",{className:o.colon,children:":"})," ",(0,a.jsx)("span",{className:o.fieldType,children:r})]},t)}))}),(0,a.jsx)("span",{className:o.braces,children:"}"})]})]})})}},40964:(e,t,r)=>{r.d(t,{A:()=>g});var n=r(96540),s=r(86105),i=r(5e3),o=r(44939),a=r(72011),l=r(4671),d=r(61545),c=r(34066),p=r(30222),u=r(19337),h=r(54676),m=r(55629),y=r(36694),f=r(64198),x=r(92303),b=r(95293),j=r(74848);function g(e){let{defaultQuery:t,defaultVariables:r="{}",endpoint:g="https://unistate-ckb-test.unistate.io/v1/graphql"}=e;const _=(0,x.A)(),{colorMode:v}=(0,b.G)(),T="dark"===v,S=e=>e.replace(/\\/g,"\\\\");t=S(t);const w=t.includes("$")||t.includes("variables"),[N,q]=(0,n.useState)(g),[A,k]=(0,n.useState)(t),[C,Q]=(0,n.useState)((()=>{if("string"==typeof r)return S(r);const e=g.includes("test")?"test":"main",t=r[e];return"string"==typeof t?S(t):JSON.stringify(t,null,2)})),[F,P]=(0,n.useState)(null),[I,D]=(0,n.useState)(!1);(0,n.useEffect)((()=>{try{const e=(0,f.G)(t);k(e)}catch(e){console.error("Failed to format initial query:",e)}}),[t]);const G=T?p.A:u.A;if(!_)return null;const R={color:"var(--ifm-color-emphasis-700)","&:hover":{color:"var(--ifm-color-primary)",backgroundColor:"var(--ifm-color-emphasis-200)"}},$={color:"var(--ifm-color-emphasis-700)",borderColor:"var(--ifm-color-emphasis-300)",fontSize:"0.75rem",minWidth:"auto",px:1,"&.Mui-selected, &:hover":{color:"var(--ifm-color-primary)",borderColor:"var(--ifm-color-primary)",backgroundColor:"var(--ifm-color-emphasis-200)"}},V={...$,backgroundColor:"var(--ifm-color-primary-lighter)",color:"var(--ifm-color-primary-darker)","&:hover":{backgroundColor:"var(--ifm-color-primary-lighter)",color:"var(--ifm-color-primary-darker)"}};return(0,j.jsxs)(s.A,{sx:{my:2},children:[(0,j.jsxs)(s.A,{sx:{display:"flex",flexDirection:"column",gap:2,mb:2},children:[(0,j.jsxs)(s.A,{sx:{flexGrow:1,border:1,borderColor:"var(--ifm-color-emphasis-300)",borderRadius:1,position:"relative","&:hover .toolbar":{opacity:1},maxWidth:"100%"},children:[(0,j.jsxs)(s.A,{className:"toolbar",sx:{position:"absolute",top:8,right:8,zIndex:1,display:"flex",gap:1,backgroundColor:"rgba(var(--ifm-background-surface-color-rgb), 0.95)",backdropFilter:"blur(8px)",padding:"4px",borderRadius:1,boxShadow:"0 2px 8px rgba(0,0,0,0.1)",opacity:0,transition:"opacity 0.2s ease"},children:[(0,j.jsxs)(i.A,{size:"small",sx:{"& .MuiButtonGroup-grouped":{borderColor:"var(--ifm-color-emphasis-300)"}},children:[(0,j.jsx)(o.A,{sx:N.includes("test")?V:$,onClick:()=>q("https://unistate-ckb-test.unistate.io/v1/graphql"),children:"Test"}),(0,j.jsx)(o.A,{sx:N.includes("test")?$:V,onClick:()=>q("https://ckb-graph.unistate.io/v1/graphql"),children:"Main"})]}),(0,j.jsxs)(i.A,{size:"small",sx:{"& .MuiButtonGroup-grouped":{borderColor:"var(--ifm-color-emphasis-300)"}},children:[(0,j.jsx)(a.A,{title:"Format Query",children:(0,j.jsx)(l.A,{size:"small",onClick:()=>{try{k((0,f.G)(A))}catch(e){console.error("Failed to format query:",e)}},sx:R,children:(0,j.jsx)(h.A,{fontSize:"small"})})}),(0,j.jsx)(a.A,{title:"Copy Query",children:(0,j.jsx)(l.A,{size:"small",onClick:()=>navigator.clipboard.writeText(A),sx:R,children:(0,j.jsx)(m.A,{fontSize:"small"})})}),(0,j.jsx)(a.A,{title:"Execute Query",children:(0,j.jsx)(l.A,{size:"small",onClick:async()=>{try{D(!0);const e=await fetch(N,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:A,variables:JSON.parse(C)})}),t=await e.json();P(t)}catch(e){P({error:e.message})}finally{D(!1)}},disabled:I,sx:{...R,"&:hover":{color:"var(--ifm-color-primary)",backgroundColor:"var(--ifm-color-emphasis-200)"},"&.Mui-disabled":{color:"var(--ifm-color-emphasis-300)"}},children:(0,j.jsx)(y.A,{fontSize:"small"})})})]})]}),(0,j.jsx)(c.A,{language:"graphql",style:G,customStyle:{margin:0,padding:"16px",backgroundColor:"var(--ifm-background-surface-color)"},contentEditable:!0,onKeyDown:e=>{if("Tab"===e.key){e.preventDefault();const t=window.getSelection(),r=t?.getRangeAt(0),n=document.createTextNode("  ");r?.insertNode(n),r?.setStartAfter(n),r?.setEndAfter(n)}},onInput:e=>{const t=e.target.innerText;k(t);t.includes("$")||t.includes("variables")||Q("{}")},children:A})]}),w&&(0,j.jsx)(d.A,{label:"Variables",multiline:!0,value:C,onChange:e=>Q(e.target.value),sx:{flex:1,"& .MuiOutlinedInput-root":{bgcolor:"var(--ifm-background-surface-color)","& fieldset":{borderColor:"var(--ifm-color-emphasis-300)"}},"& .MuiInputLabel-root":{color:"var(--ifm-color-emphasis-700)"},"& .MuiInputBase-input":{color:"var(--ifm-font-color-base)",fontFamily:"var(--ifm-font-family-monospace)"}}})]}),F&&(0,j.jsx)(s.A,{sx:{border:1,borderColor:"var(--ifm-color-emphasis-300)",borderRadius:1,overflow:"auto",maxHeight:"300px"},children:(0,j.jsx)(c.A,{language:"json",style:G,customStyle:{margin:0,padding:16,backgroundColor:"var(--ifm-background-surface-color)"},children:JSON.stringify(F,null,2)})})]})}}}]);